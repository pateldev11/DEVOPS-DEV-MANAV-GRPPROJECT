trigger:
  branches:
    include:
      - main

variables:
  buildConfiguration: 'Release'

pool:
  vmImage: 'windows-latest'

stages:
# -----------------------------------
# Stage 1: Build, Test, SonarQube CI
# -----------------------------------
- stage: BuildAndAnalyze
  displayName: 'Build, Test, and Analyze'
  jobs:
    - job: Build
      displayName: 'Build and SonarQube Analysis'
      steps:
        - checkout: self
          displayName: 'Checkout source'

        # ✅ Install .NET 8 SDK
        - task: UseDotNet@2
          displayName: 'Install .NET 8 SDK'
          inputs:
            packageType: 'sdk'
            version: '8.0.x'
            installationPath: $(Agent.ToolsDirectory)/dotnet

        # ✅ Prepare SonarQube Analysis
        - task: SonarQubePrepare@5
          displayName: 'Prepare SonarQube Analysis'
          inputs:
            SonarQube: 'SonarQubeServiceConnection'  # Replace with your service connection name
            scannerMode: 'CLI'
            configMode: 'manual'
            cliProjectKey: 'dpat1072_DEVOPS-FINAL-GRP-PROJECT'
            cliProjectName: 'DEVOPS-FINAL-GRP-PROJECT'
            extraProperties: |
              sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
              sonar.exclusions=**/wwwroot/**

        # ✅ Restore project dependencies
        - task: DotNetCoreCLI@2
          displayName: 'Restore project'
          inputs:
            command: 'restore'
            projects: '**/*.csproj'

        # ✅ Build the MVC app
        - task: DotNetCoreCLI@2
          displayName: 'Build project'
          inputs:
            command: 'build'
            projects: '**/*.csproj'
            arguments: '--configuration $(buildConfiguration)'

        # ✅ Run tests and collect code coverage
        - task: DotNetCoreCLI@2
          displayName: 'Run tests with coverage'
          inputs:
            command: 'test'
            projects: '**/*Tests.csproj'
            arguments: '--collect:"XPlat Code Coverage"'
            publishTestResults: true

        # ✅ Run SonarQube Analysis
        - task: SonarQubeAnalyze@5
          displayName: 'Run SonarQube Analysis'

        # ✅ Publish SonarQube Results
        - task: SonarQubePublish@5
          displayName: 'Publish SonarQube Report'
          inputs:
            pollingTimeoutSec: '300'

        # ✅ Publish app artifact
        - task: DotNetCoreCLI@2
          displayName: 'Publish project'
          inputs:
            command: 'publish'
            projects: '**/*.csproj'
            arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifacts'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'mvc-app-drop'
            publishLocation: 'Container'

# ---------------------
# Stage 2–5: CD Stages
# ---------------------
# (Use same stages from previous YAML: DeployDev, DeployQAT, DeployStaging, DeployProduction)
